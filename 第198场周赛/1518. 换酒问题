小区便利店正在促销，用 numExchange 个空酒瓶可以兑换一瓶新酒。你购入了 numBottles 瓶酒。

如果喝掉了酒瓶中的酒，那么酒瓶就会变成空的。

请你计算 最多 能喝到多少瓶酒。

 

示例 1：

输入：numBottles = 9, numExchange = 3
输出：13
解释：你可以用 3 个空酒瓶兑换 1 瓶酒。
所以最多能喝到 9 + 3 + 1 = 13 瓶酒。

示例 3：

输入：numBottles = 5, numExchange = 5
输出：6

提示：

1 <= numBottles <= 100
2 <= numExchange <= 100

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/water-bottles
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

我的答案：
C++
class Solution {
public:
    int numWaterBottles(int numBottles, int numExchange) {
        int sum = 0;
        int c=0,y=0;
        sum += numBottles;
        while(numBottles / numExchange >0)
        {
            
            int c = numBottles / numExchange;
            int y = numBottles % numExchange;
            sum += c;
            numBottles = c+y;
        }
        return sum;
    }
};
大佬答案：
//还是解释一下，一个空瓶价值为1的话，numBottles * numExchange为总价值，至少一个空瓶最后留在手里换不了，所以总价值-1，numExchange-1为一份酒的价值,。
class Solution {
    public int numWaterBottles(int numBottles, int numExchange) {
        return (numBottles * numExchange-1)/(numExchange-1);
    }
}

作者：dan-yan-liu-shui-hua-ping-you
链接：https://leetcode-cn.com/problems/water-bottles/solution/yi-xing-dai-ma-chun-shu-xue-jie-fa-o1-by-dan-yan-l/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

官方答案：
1.只要是numBottles >= numExchange的情况，就可以进行第一轮的空瓶兑换；
2.new_ 用来记载每一次的积攒瓶子的数量，开启第二轮兑换，while循环，只要可以换，n加总；

int numWaterBottles(int numBottles, int numExchange){
    int n = numBottles;
    int new_ = 0;
    int t = 0;
    if(numBottles >= numExchange){
        n = numBottles/numExchange + n;//第一轮
        new_ = numBottles/numExchange + numBottles%numExchange;//用来换新饮料的瓶子，开启第二轮
        while( new_ >= numExchange)  {//可以换
            n = new_/numExchange + n;
            new_ = new_/numExchange + new_%numExchange; 
        }
        t = n ;
    }
    else{
        t = numBottles;
    }
    return t;
}


作者：bella_
链接：https://leetcode-cn.com/problems/water-bottles/solution/cyu-yan-lun-ci-jie-fa-xiao-guo-shuang-yi-bai-by-be/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
