给定字符串 s 和 t ，判断 s 是否为 t 的子序列。

你可以认为 s 和 t 中仅包含英文小写字母。字符串 t 可能会很长（长度 ~= 500,000），而 s 是个短字符串（长度 <=100）。

字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，"ace"是"abcde"的一个子序列，而"aec"不是）。

示例 1:
s = "abc", t = "ahbgdc"

返回 true.

示例 2:
s = "axc", t = "ahbgdc"

返回 false.

后续挑战 :

如果有大量输入的 S，称作S1, S2, ... , Sk 其中 k >= 10亿，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？

致谢:

特别感谢 @pbrother 添加此问题并且创建所有测试用例。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/is-subsequence
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

我的答案：
暴力法（同官方答案双指针法）
class Solution {
public:
    bool isSubsequence(string s, string t) {
        int i=0,j=0;
        while(i<s.length()&&j<t.length())
        {
            if(s[i]==t[j])
            {
                i++;
                j++;
            }
            else
            {
                j++;
            }
        }
        if(i>=s.length())
            return true;
        else
            return false;
        
    }
};
官方答案：
方法一：双指针
思路及算法

本题询问的是，ss 是否是 tt 的子序列，因此只要能找到任意一种 ss 在 tt 中出现的方式，即可认为 ss 是 tt 的子序列。

而当我们从前往后匹配，可以发现每次贪心地匹配靠前的字符是最优决策。

假定当前需要匹配字符 cc，而字符 cc 在 tt 中的位置 x_1x 
1
​	
  和 x_2x 
2
​	
  出现（x_1 < x_2x 
1
​	
 <x 
2
​	
 ），那么贪心取 x_1x 
1
​	
  是最优解，因为 x_2x 
2
​	
  后面能取到的字符，x_1x 
1
​	
  也都能取到，并且通过 x_1x 
1
​	
  与 x_2x 
2
​	
  之间的可选字符，更有希望能匹配成功。

这样，我们初始化两个指针 ii 和 jj，分别指向 ss 和 tt 的初始位置。每次贪心地匹配，匹配成功则 ii 和 jj 同时右移，匹配 ss 的下一个位置，匹配失败则 jj 右移，ii 不变，尝试用 tt 的下一个字符匹配 ss。

最终如果 ii 移动到 ss 的末尾，就说明 ss 是 tt 的子序列。

代码

C++JavaPython3GolangC

class Solution {
public:
    bool isSubsequence(string s, string t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;
        while (i < n && j < m) {
            if (s[i] == t[j]) {
                i++;
            }
            j++;
        }
        return i == n;
    }
};
复杂度分析

时间复杂度：O(n+m)O(n+m)，其中 nn 为 ss 的长度，mm 为 tt 的长度。每次无论是匹配成功还是失败，都有至少一个指针发生右移，两指针能够位移的总距离为 n+mn+m。

空间复杂度：O(1)O(1)。

方法二：动态规划
思路及算法

考虑前面的双指针的做法，我们注意到我们有大量的时间用于在 tt 中找到下一个匹配字符。

这样我们可以预处理出对于 tt 的每一个位置，从该位置开始往后每一个字符第一次出现的位置。

我们可以使用动态规划的方法实现预处理，令 f[i][j]f[i][j] 表示字符串 tt 中从位置 ii 开始往后字符 jj 第一次出现的位置。在进行状态转移时，如果 tt 中位置 ii 的字符就是 jj，那么 f[i][j]=if[i][j]=i，否则 jj 出现在位置 i+1i+1 开始往后，即 f[i][j]=f[i+1][j]f[i][j]=f[i+1][j]，因此我们要倒过来进行动态规划，从后往前枚举 ii。

这样我们可以写出状态转移方程：

f[i][j]=\begin{cases} i, & t[i]=j\\ f[i+1][j], & t[i] \neq j \end{cases}
f[i][j]={ i,t[i]=j
        { f[i+1][j],t[i]!=j	
 

假定下标从 00 开始，那么 f[i][j]f[i][j] 中有 0 \leq i \leq m-10≤i≤m−1 ，对于边界状态 f[m-1][..]f[m−1][..]，我们置 f[m][..]f[m][..] 为 mm，让 f[m-1][..]f[m−1][..] 正常进行转移。这样如果 f[i][j]=mf[i][j]=m，则表示从位置 ii 开始往后不存在字符 jj。

这样，我们可以利用 ff 数组，每次 O(1)O(1) 地跳转到下一个位置，直到位置变为 mm 或 ss 中的每一个字符都匹配成功。

同时我们注意到，该解法中对 tt 的处理与 ss 无关，且预处理完成后，可以利用预处理数组的信息，线性地算出任意一个字符串 ss 是否为 tt 的子串。这样我们就可以解决「后续挑战」啦。

代码

C++JavaPython3GolangC

class Solution {
public:
    bool isSubsequence(string s, string t) {
        int n = s.size(), m = t.size();

        vector<vector<int> > f(m + 1, vector<int>(26, 0));
        for (int i = 0; i < 26; i++) {
            f[m][i] = m;
        }

        for (int i = m - 1; i >= 0; i--) {
            for (int j = 0; j < 26; j++) {
                if (t[i] == j + 'a')
                    f[i][j] = i;
                else
                    f[i][j] = f[i + 1][j];
            }
        }
        int add = 0;
        for (int i = 0; i < n; i++) {
            ///后续不出现返回错误
            if (f[add][s[i] - 'a'] == m) {
                return false;
            }
            //后续出现，从出现的下一个位置找下一个字符是否出现
            add = f[add][s[i] - 'a'] + 1;
        }
        return true;
    }
};
复杂度分析

时间复杂度：O(m \times |\Sigma| + n)O(m×∣Σ∣+n)，其中 nn 为 ss 的长度，mm 为 tt 的长度，\SigmaΣ 为字符集，在本题中字符串只包含小写字母，|\Sigma| = 26∣Σ∣=26。预处理时间复杂度 O(m)O(m)，判断子序列时间复杂度 O(n)O(n)。

如果是计算 kk 个平均长度为 nn 的字符串是否为 tt 的子序列，则时间复杂度为 O(m \times |\Sigma| +k \times n)O(m×∣Σ∣+k×n)。
空间复杂度：O(m \times |\Sigma|)O(m×∣Σ∣)，为动态规划数组的开销。

作者：LeetCode-Solution
链接：https://leetcode-cn.com/problems/is-subsequence/solution/pan-duan-zi-xu-lie-by-leetcode-solution/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
